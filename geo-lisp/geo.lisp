(defun ^ (&rest args)
  (let* ((n (length args))
         (v (make-array n :element-type 'long-float :initial-element 0d0)))
    (do ((args args (cdr args))
         (i 0 (1+ i)))
        ((null args) v)
      (setf (aref v i) (coerce (car args) 'long-float)))))

(defun ^-copy (v)
  (declare (type (vector long-float) v))
  (let* ((n (length v)))
    (make-array n :element-type 'long-float :initial-contents v)))

(defun ^-make (n)
  (make-array n :element-type 'long-float))

(defun ^-make-zero (n)
  (make-array n :element-type 'long-float :initial-element 0.0d0))

(defun ^-make-cube (v)
  (let ((v-lf (coerce v 'long-float)))
    (make-array n :element-type 'long-float :initial-element v-lf)))

(defun ^-axis-versor (n axis)
  (let ((v (^-make-zero n)))
    (setf (aref v axis) 1.0d0)
    v))

(declaim (inline ^-dim))
(defun ^-dim (v &rest vs)
  (declare (type (vector long-float) v))
  (let ((dim (length v)))
    (dolist (v1 vs dim)
      (let ((dim1 (length v1)))
        (unless (= dim dim1)
          (throw 'vectors-dimension-mismatch 0))))))

(defun ^+ (v0 v1)
  (declare (type (vector long-float) v0)
           (type (vector long-float) v1))
  (let* ((n (^-dim v0 v1))
         (r (^-make n)))
    (dotimes (i n r)
      (setf (aref r i) (+ (aref v0 i) (aref v1 i))))))

(defun ^. (v0 v1)
  (declare (type (vector long-float) v0)
           (type (vector long-float) v1))
  (let* ((n (^-dim v0 v1))
         (r 0))
    (dotimes (i n r)
      (incf r (* (aref v0 i) (aref v1 i))))))

(defun ^-setf (v0 v1)
  (declare (type (vector long-float) v0)
           (type (vector long-float) v1))
  (let* ((n (^-dim v0 v1)))
    (dotimes (i n v0)
      (setf (aref v0 i) (aref v1 i)))))

(defun ^-incf (v0 v1)
  (declare (type (vector long-float) v0)
           (type (vector long-float) v1))
  (let* ((n (^-dim v0 v1)))
    (dotimes (i n v0)
      (incf (aref v0 i) (aref v1 i)))))

(defun ^-decf (v0 v1)
    (declare (type (vector long-float) v0)
           (type (vector long-float) v1))
  (let* ((n (^-dim v0 v1)))
    (dotimes (i n v0)
      (decf (aref v0 i) (aref v1 i)))))
